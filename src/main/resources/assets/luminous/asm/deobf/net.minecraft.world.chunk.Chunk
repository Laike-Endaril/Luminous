package asm.net.minecraft.world.chunk;
import java.util.*;
import org.objectweb.asm.*;
public class ChunkDump implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter cw = new ClassWriter(0);
FieldVisitor fv;
MethodVisitor mv;
AnnotationVisitor av0;

cw.visit(52, ACC_PUBLIC + ACC_SUPER, "net/minecraft/world/chunk/Chunk", null, "java/lang/Object", new String[] { "net/minecraftforge/common/capabilities/ICapabilityProvider" });

cw.visitInnerClass("net/minecraft/world/chunk/Chunk$EnumCreateEntityType", "net/minecraft/world/chunk/Chunk", "EnumCreateEntityType", ACC_PUBLIC + ACC_FINAL + ACC_STATIC + ACC_ENUM);

cw.visitInnerClass("net/minecraft/util/math/BlockPos$MutableBlockPos", "net/minecraft/util/math/BlockPos", "MutableBlockPos", ACC_PUBLIC + ACC_STATIC);

cw.visitInnerClass("net/minecraftforge/event/entity/EntityEvent$EnteringChunk", "net/minecraftforge/event/entity/EntityEvent", "EnteringChunk", ACC_PUBLIC + ACC_STATIC);

cw.visitInnerClass("net/minecraftforge/event/world/ChunkEvent$Load", "net/minecraftforge/event/world/ChunkEvent", "Load", ACC_PUBLIC + ACC_STATIC);

cw.visitInnerClass("net/minecraftforge/event/world/ChunkEvent$Unload", "net/minecraftforge/event/world/ChunkEvent", "Unload", ACC_PUBLIC + ACC_STATIC);

cw.visitInnerClass("net/minecraft/util/EnumFacing$Plane", "net/minecraft/util/EnumFacing", "Plane", ACC_PUBLIC + ACC_FINAL + ACC_STATIC + ACC_ENUM);

cw.visitInnerClass("net/minecraft/util/EnumFacing$AxisDirection", "net/minecraft/util/EnumFacing", "AxisDirection", ACC_PUBLIC + ACC_FINAL + ACC_STATIC + ACC_ENUM);

cw.visitInnerClass("java/lang/invoke/MethodHandles$Lookup", "java/lang/invoke/MethodHandles", "Lookup", ACC_PUBLIC + ACC_FINAL + ACC_STATIC);

{
fv = cw.visitField(ACC_PUBLIC, "moddedBlockLights", "Ljava/util/HashMap;", "Ljava/util/HashMap<Lnet/minecraft/util/math/BlockPos;Ljava/lang/Integer;>;", null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "LOGGER", "Lorg/apache/logging/log4j/Logger;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, "NULL_BLOCK_STORAGE", "Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "blockBiomeArray", "[B", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "precipitationHeightMap", "[I", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "updateSkylightColumns", "[Z", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "loaded", "Z", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "world", "Lnet/minecraft/world/World;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "heightMap", "[I", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PUBLIC + ACC_FINAL, "x", "I", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PUBLIC + ACC_FINAL, "z", "I", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "isGapLightingUpdated", "Z", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "tileEntities", "Ljava/util/Map;", "Ljava/util/Map<Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/tileentity/TileEntity;>;", null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;", "[Lnet/minecraft/util/ClassInheritanceMultiMap<Lnet/minecraft/entity/Entity;>;", null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "isTerrainPopulated", "Z", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "isLightPopulated", "Z", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "ticked", "Z", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "dirty", "Z", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "hasEntities", "Z", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "lastSaveTime", "J", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "heightMapMinimum", "I", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "inhabitedTime", "J", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "queuedLightChecks", "I", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "tileEntityPosQueue", "Ljava/util/concurrent/ConcurrentLinkedQueue;", "Ljava/util/concurrent/ConcurrentLinkedQueue<Lnet/minecraft/util/math/BlockPos;>;", null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PUBLIC, "unloadQueued", "Z", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_STATIC, "populating", "Lnet/minecraft/util/math/ChunkPos;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "capabilities", "Lnet/minecraftforge/common/capabilities/CapabilityDispatcher;", null, null);
fv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "(Lnet/minecraft/world/World;II)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/HashMap");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V", false);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "moddedBlockLights", "Ljava/util/HashMap;");
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(BIPUSH, 16);
mv.visitTypeInsn(ANEWARRAY, "net/minecraft/world/chunk/storage/ExtendedBlockStorage");
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(SIPUSH, 256);
mv.visitIntInsn(NEWARRAY, T_BYTE);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "blockBiomeArray", "[B");
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(SIPUSH, 256);
mv.visitIntInsn(NEWARRAY, T_INT);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "precipitationHeightMap", "[I");
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(SIPUSH, 256);
mv.visitIntInsn(NEWARRAY, T_BOOLEAN);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "updateSkylightColumns", "[Z");
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "com/google/common/collect/Maps", "newHashMap", "()Ljava/util/HashMap;", false);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(SIPUSH, 4096);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "queuedLightChecks", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "com/google/common/collect/Queues", "newConcurrentLinkedQueue", "()Ljava/util/concurrent/ConcurrentLinkedQueue;", false);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "tileEntityPosQueue", "Ljava/util/concurrent/ConcurrentLinkedQueue;");
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(BIPUSH, 16);
mv.visitTypeInsn(ANEWARRAY, "net/minecraft/util/ClassInheritanceMultiMap");
mv.visitTypeInsn(CHECKCAST, "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(SIPUSH, 256);
mv.visitIntInsn(NEWARRAY, T_INT);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 4);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/world/World", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitVarInsn(ILOAD, 4);
mv.visitTypeInsn(NEW, "net/minecraft/util/ClassInheritanceMultiMap");
mv.visitInsn(DUP);
mv.visitLdcInsn(Type.getType("Lnet/minecraft/entity/Entity;"));
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/ClassInheritanceMultiMap", "<init>", "(Ljava/lang/Class;)V", false);
mv.visitInsn(AASTORE);
mv.visitIincInsn(4, 1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "precipitationHeightMap", "[I");
mv.visitIntInsn(SIPUSH, -999);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "fill", "([II)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "blockBiomeArray", "[B");
mv.visitInsn(ICONST_M1);
mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "fill", "([BB)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraftforge/event/ForgeEventFactory", "gatherCapabilities", "(Lnet/minecraft/world/chunk/Chunk;)Lnet/minecraftforge/common/capabilities/CapabilityDispatcher;", false);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "capabilities", "Lnet/minecraftforge/common/capabilities/CapabilityDispatcher;");
mv.visitInsn(RETURN);
mv.visitMaxs(5, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "<init>", "(Lnet/minecraft/world/World;Lnet/minecraft/world/chunk/ChunkPrimer;II)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "<init>", "(Lnet/minecraft/world/World;II)V", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
mv.visitVarInsn(ISTORE, 5);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 6);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/world/World", "net/minecraft/world/chunk/ChunkPrimer", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 6);
mv.visitIntInsn(BIPUSH, 16);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 7);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 7);
mv.visitIntInsn(BIPUSH, 16);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l3);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 8);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 8);
mv.visitIntInsn(SIPUSH, 256);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l5);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ILOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/ChunkPrimer", "getBlockState", "(III)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getMaterial", "()Lnet/minecraft/block/material/Material;", true);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/block/material/Material", "AIR", "Lnet/minecraft/block/material/Material;");
Label l6 = new Label();
mv.visitJumpInsn(IF_ACMPEQ, l6);
mv.visitVarInsn(ILOAD, 8);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitVarInsn(ISTORE, 10);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 10);
mv.visitInsn(AALOAD);
Label l7 = new Label();
mv.visitJumpInsn(IFNONNULL, l7);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 10);
mv.visitTypeInsn(NEW, "net/minecraft/world/chunk/storage/ExtendedBlockStorage");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 10);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "<init>", "(IZ)V", false);
mv.visitInsn(AASTORE);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"net/minecraft/block/state/IBlockState", Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 10);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 8);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "set", "(IIILnet/minecraft/block/state/IBlockState;)V", false);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitIincInsn(8, 1);
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(7, 1);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(6, 1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(6, 11);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "isAtLocation", "(II)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitJumpInsn(IF_ICMPNE, l0);
mv.visitInsn(ICONST_1);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getHeight", "(Lnet/minecraft/util/math/BlockPos;)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getHeightValue", "(II)I", false);
mv.visitInsn(IRETURN);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getHeightValue", "(II)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IOR);
mv.visitInsn(IALOAD);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "getLastExtendedBlockStorage", "()Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;", null, null);
{
av0 = mv.visitAnnotation("Ljavax/annotation/Nullable;", true);
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 1);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFLT, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(AALOAD);
Label l2 = new Label();
mv.visitJumpInsn(IFNULL, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(AALOAD);
mv.visitInsn(ARETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(1, -1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getTopFilledSegment", "()I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "getLastExtendedBlockStorage", "()Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;", false);
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitInsn(ICONST_0);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/world/chunk/storage/ExtendedBlockStorage"}, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "getYLocation", "()I", false);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getBlockStorageArray", "()[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED, "generateHeightMap", "()V", null, null);
{
av0 = mv.visitAnnotation("Lnet/minecraftforge/fml/relauncher/SideOnly;", true);
av0.visitEnum("value", "Lnet/minecraftforge/fml/relauncher/Side;", "CLIENT");
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getTopFilledSegment", "()I", false);
mv.visitVarInsn(ISTORE, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn(new Integer(2147483647));
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "heightMapMinimum", "I");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 16);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 16);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "precipitationHeightMap", "[I");
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitInsn(IADD);
mv.visitIntInsn(SIPUSH, -999);
mv.visitInsn(IASTORE);
mv.visitVarInsn(ILOAD, 1);
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 4);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 4);
Label l5 = new Label();
mv.visitJumpInsn(IFLE, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "getBlockLightOpacity", "(III)I", false);
Label l6 = new Label();
mv.visitJumpInsn(IFEQ, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IOR);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IASTORE);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMapMinimum", "I");
mv.visitJumpInsn(IF_ICMPGE, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "heightMapMinimum", "I");
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(4, -1);
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(3, 1);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(2, 1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "dirty", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(4, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "generateSkylightMap", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getTopFilledSegment", "()I", false);
mv.visitVarInsn(ISTORE, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn(new Integer(2147483647));
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "heightMapMinimum", "I");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 16);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 16);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "precipitationHeightMap", "[I");
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitInsn(IADD);
mv.visitIntInsn(SIPUSH, -999);
mv.visitInsn(IASTORE);
mv.visitVarInsn(ILOAD, 1);
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 4);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 4);
Label l5 = new Label();
mv.visitJumpInsn(IFLE, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "getBlockLightOpacity", "(III)I", false);
Label l6 = new Label();
mv.visitJumpInsn(IFEQ, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IOR);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IASTORE);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMapMinimum", "I");
mv.visitJumpInsn(IF_ICMPGE, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 4);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "heightMapMinimum", "I");
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(4, -1);
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
Label l7 = new Label();
mv.visitJumpInsn(IFEQ, l7);
mv.visitIntInsn(BIPUSH, 15);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 1);
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IADD);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 5);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "getBlockLightOpacity", "(III)I", false);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ILOAD, 6);
Label l9 = new Label();
mv.visitJumpInsn(IFNE, l9);
mv.visitVarInsn(ILOAD, 4);
mv.visitIntInsn(BIPUSH, 15);
mv.visitJumpInsn(IF_ICMPEQ, l9);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 6);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 4);
Label l10 = new Label();
mv.visitJumpInsn(IFLE, l10);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 7);
mv.visitVarInsn(ALOAD, 7);
mv.visitJumpInsn(IFNULL, l10);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 5);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "setSkyLight", "(IIII)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "notifyLightSet", "(Lnet/minecraft/util/math/BlockPos;)V", false);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(5, -1);
mv.visitVarInsn(ILOAD, 5);
mv.visitJumpInsn(IFLE, l7);
mv.visitVarInsn(ILOAD, 4);
mv.visitJumpInsn(IFGT, l8);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
mv.visitIincInsn(3, 1);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(2, 1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "dirty", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(7, 8);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "propagateSkylightOcclusion", "(II)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "updateSkylightColumns", "[Z");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IMUL);
mv.visitInsn(IADD);
mv.visitInsn(ICONST_1);
mv.visitInsn(BASTORE);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "isGapLightingUpdated", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(4, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "recheckGaps", "(Z)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "profiler", "Lnet/minecraft/profiler/Profiler;");
mv.visitLdcInsn("recheckGaps");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/profiler/Profiler", "startSection", "(Ljava/lang/String;)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IMUL);
mv.visitIntInsn(BIPUSH, 8);
mv.visitInsn(IADD);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IMUL);
mv.visitIntInsn(BIPUSH, 8);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitIntInsn(BIPUSH, 16);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "isAreaLoaded", "(Lnet/minecraft/util/math/BlockPos;I)Z", false);
Label l0 = new Label();
mv.visitJumpInsn(IFEQ, l0);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 16);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l2);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 16);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "updateSkylightColumns", "[Z");
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IMUL);
mv.visitInsn(IADD);
mv.visitInsn(BALOAD);
Label l5 = new Label();
mv.visitJumpInsn(IFEQ, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "updateSkylightColumns", "[Z");
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IMUL);
mv.visitInsn(IADD);
mv.visitInsn(ICONST_0);
mv.visitInsn(BASTORE);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getHeightValue", "(II)I", false);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IMUL);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IMUL);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 6);
mv.visitLdcInsn(new Integer(2147483647));
mv.visitVarInsn(ISTORE, 7);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/util/EnumFacing$Plane", "HORIZONTAL", "Lnet/minecraft/util/EnumFacing$Plane;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/EnumFacing$Plane", "iterator", "()Ljava/util/Iterator;", false);
mv.visitVarInsn(ASTORE, 8);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_FULL, 9, new Object[] {"net/minecraft/world/chunk/Chunk", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "java/util/Iterator"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label l7 = new Label();
mv.visitJumpInsn(IFEQ, l7);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/util/EnumFacing");
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/EnumFacing", "getFrontOffsetX", "()I", false);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/EnumFacing", "getFrontOffsetZ", "()I", false);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "getChunksLowestHorizon", "(II)I", false);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Math", "min", "(II)I", false);
mv.visitVarInsn(ISTORE, 7);
mv.visitJumpInsn(GOTO, l6);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 7);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "checkSkylightNeighborHeight", "(III)V", false);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/util/EnumFacing$Plane", "HORIZONTAL", "Lnet/minecraft/util/EnumFacing$Plane;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/EnumFacing$Plane", "iterator", "()Ljava/util/Iterator;", false);
mv.visitVarInsn(ASTORE, 8);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/util/Iterator"}, 0, null);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label l9 = new Label();
mv.visitJumpInsn(IFEQ, l9);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/util/EnumFacing");
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/EnumFacing", "getFrontOffsetX", "()I", false);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/EnumFacing", "getFrontOffsetZ", "()I", false);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "checkSkylightNeighborHeight", "(III)V", false);
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitJumpInsn(IFEQ, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "profiler", "Lnet/minecraft/profiler/Profiler;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/profiler/Profiler", "endSection", "()V", false);
mv.visitInsn(RETURN);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_FULL, 4, new Object[] {"net/minecraft/world/chunk/Chunk", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitIincInsn(3, 1);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(2, 1);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "isGapLightingUpdated", "Z");
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "profiler", "Lnet/minecraft/profiler/Profiler;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/profiler/Profiler", "endSection", "()V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(7, 10);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "checkSkylightNeighborHeight", "(III)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "getHeight", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/util/math/BlockPos;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getY", "()I", false);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 3);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "updateSkylightNeighborHeight", "(IIII)V", false);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 3);
mv.visitJumpInsn(IF_ICMPGE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "updateSkylightNeighborHeight", "(IIII)V", false);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(6, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "updateSkylightNeighborHeight", "(IIII)V", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 3);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitIntInsn(BIPUSH, 16);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "isAreaLoaded", "(Lnet/minecraft/util/math/BlockPos;I)Z", false);
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ISTORE, 5);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 4);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/EnumSkyBlock", "SKY", "Lnet/minecraft/world/EnumSkyBlock;");
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "checkLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/math/BlockPos;)Z", false);
mv.visitInsn(POP);
mv.visitIincInsn(5, 1);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "dirty", "Z");
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(7, 6);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "relightBlock", "(III)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IOR);
mv.visitInsn(IALOAD);
mv.visitIntInsn(SIPUSH, 255);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 4);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ISTORE, 5);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 5);
Label l1 = new Label();
mv.visitJumpInsn(IFLE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "getBlockLightOpacity", "(III)I", false);
mv.visitJumpInsn(IFNE, l1);
mv.visitIincInsn(5, -1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 4);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IMUL);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IMUL);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "markBlocksDirtyVertical", "(IIII)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IOR);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(IASTORE);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IMUL);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IMUL);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
Label l3 = new Label();
mv.visitJumpInsn(IFEQ, l3);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 4);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l4);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ISTORE, 8);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ILOAD, 4);
Label l6 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 8);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 9);
Label l7 = new Label();
mv.visitJumpInsn(IFNULL, l7);
mv.visitVarInsn(ALOAD, 9);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 8);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 15);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "setSkyLight", "(IIII)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "notifyLightSet", "(Lnet/minecraft/util/math/BlockPos;)V", false);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(8, 1);
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
Label l8 = new Label();
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ISTORE, 8);
Label l9 = new Label();
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ILOAD, 5);
mv.visitJumpInsn(IF_ICMPGE, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 8);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 9);
Label l10 = new Label();
mv.visitJumpInsn(IFNULL, l10);
mv.visitVarInsn(ALOAD, 9);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 8);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "setSkyLight", "(IIII)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "notifyLightSet", "(Lnet/minecraft/util/math/BlockPos;)V", false);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(8, 1);
mv.visitJumpInsn(GOTO, l9);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIntInsn(BIPUSH, 15);
mv.visitVarInsn(ISTORE, 8);
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 5);
mv.visitJumpInsn(IFLE, l3);
mv.visitVarInsn(ILOAD, 8);
mv.visitJumpInsn(IFLE, l3);
mv.visitIincInsn(5, -1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "getBlockLightOpacity", "(III)I", false);
mv.visitVarInsn(ISTORE, 9);
mv.visitVarInsn(ILOAD, 9);
Label l12 = new Label();
mv.visitJumpInsn(IFNE, l12);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 9);
mv.visitLabel(l12);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ILOAD, 9);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 8);
mv.visitVarInsn(ILOAD, 8);
Label l13 = new Label();
mv.visitJumpInsn(IFGE, l13);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 8);
mv.visitLabel(l13);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 10);
mv.visitVarInsn(ALOAD, 10);
Label l14 = new Label();
mv.visitJumpInsn(IFNULL, l14);
mv.visitVarInsn(ALOAD, 10);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 5);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 8);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "setSkyLight", "(IIII)V", false);
mv.visitLabel(l14);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitJumpInsn(GOTO, l11);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IOR);
mv.visitInsn(IALOAD);
mv.visitVarInsn(ISTORE, 8);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ISTORE, 9);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ISTORE, 10);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ILOAD, 4);
Label l15 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l15);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ISTORE, 9);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ISTORE, 10);
mv.visitLabel(l15);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMapMinimum", "I");
Label l16 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l16);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 8);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "heightMapMinimum", "I");
mv.visitLabel(l16);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
Label l17 = new Label();
mv.visitJumpInsn(IFEQ, l17);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/util/EnumFacing$Plane", "HORIZONTAL", "Lnet/minecraft/util/EnumFacing$Plane;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/EnumFacing$Plane", "iterator", "()Ljava/util/Iterator;", false);
mv.visitVarInsn(ASTORE, 11);
Label l18 = new Label();
mv.visitLabel(l18);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/util/Iterator"}, 0, null);
mv.visitVarInsn(ALOAD, 11);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label l19 = new Label();
mv.visitJumpInsn(IFEQ, l19);
mv.visitVarInsn(ALOAD, 11);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/util/EnumFacing");
mv.visitVarInsn(ASTORE, 12);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ALOAD, 12);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/EnumFacing", "getFrontOffsetX", "()I", false);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ALOAD, 12);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/EnumFacing", "getFrontOffsetZ", "()I", false);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 9);
mv.visitVarInsn(ILOAD, 10);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "updateSkylightNeighborHeight", "(IIII)V", false);
mv.visitJumpInsn(GOTO, l18);
mv.visitLabel(l19);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ILOAD, 9);
mv.visitVarInsn(ILOAD, 10);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "updateSkylightNeighborHeight", "(IIII)V", false);
mv.visitLabel(l17);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "dirty", "Z");
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_FULL, 6, new Object[] {"net/minecraft/world/chunk/Chunk", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitInsn(RETURN);
mv.visitMaxs(7, 13);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getBlockLightOpacity", "(Lnet/minecraft/util/math/BlockPos;)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockState", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getLightOpacity", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/math/BlockPos;)I", true);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "getBlockLightOpacity", "(III)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockState", "(III)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "loaded", "Z");
Label l0 = new Label();
mv.visitJumpInsn(IFNE, l0);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getLightOpacity", "()I", true);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/block/state/IBlockState"}, 0, null);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 1);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitInsn(IOR);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitInsn(IOR);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getLightOpacity", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/math/BlockPos;)I", true);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitMaxs(9, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getBlockState", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/state/IBlockState;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getY", "()I", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockState", "(III)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getBlockState", "(III)Lnet/minecraft/block/state/IBlockState;", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Throwable");
Label l3 = new Label();
Label l4 = new Label();
mv.visitTryCatchBlock(l3, l4, l2, "java/lang/Throwable");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "getWorldType", "()Lnet/minecraft/world/WorldType;", false);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/WorldType", "DEBUG_ALL_BLOCK_STATES", "Lnet/minecraft/world/WorldType;");
mv.visitJumpInsn(IF_ACMPNE, l0);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 60);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l5);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/init/Blocks", "BARRIER", "Lnet/minecraft/block/Block;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "getDefaultState", "()Lnet/minecraft/block/state/IBlockState;", false);
mv.visitVarInsn(ASTORE, 4);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/block/state/IBlockState"}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 70);
Label l6 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l6);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/world/gen/ChunkGeneratorDebug", "getBlockStateFor", "(II)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitVarInsn(ASTORE, 4);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 4);
Label l7 = new Label();
mv.visitJumpInsn(IFNONNULL, l7);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/init/Blocks", "AIR", "Lnet/minecraft/block/Block;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "getDefaultState", "()Lnet/minecraft/block/state/IBlockState;", false);
Label l8 = new Label();
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 4);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"net/minecraft/block/state/IBlockState"});
mv.visitInsn(ARETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitJumpInsn(IFLT, l3);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitInsn(ARRAYLENGTH);
mv.visitJumpInsn(IF_ICMPGE, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
mv.visitJumpInsn(IFNULL, l3);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ILOAD, 1);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "get", "(III)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitLabel(l1);
mv.visitInsn(ARETURN);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/init/Blocks", "AIR", "Lnet/minecraft/block/Block;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "getDefaultState", "()Lnet/minecraft/block/state/IBlockState;", false);
mv.visitLabel(l4);
mv.visitInsn(ARETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Throwable"});
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
mv.visitLdcInsn("Getting block state");
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/crash/CrashReport", "makeCrashReport", "(Ljava/lang/Throwable;Ljava/lang/String;)Lnet/minecraft/crash/CrashReport;", false);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 5);
mv.visitLdcInsn("Block being got");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/crash/CrashReport", "makeCategory", "(Ljava/lang/String;)Lnet/minecraft/crash/CrashReportCategory;", false);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 6);
mv.visitLdcInsn("Location");
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInvokeDynamicInsn("call", "(III)Lnet/minecraft/crash/ICrashReportDetail;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"), new Object[]{Type.getType("()Ljava/lang/Object;"), new Handle(Opcodes.H_INVOKESTATIC, "net/minecraft/world/chunk/Chunk", "lambda$getBlockState$0", "(III)Ljava/lang/String;"), Type.getType("()Ljava/lang/String;")});
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/crash/CrashReportCategory", "addDetail", "(Ljava/lang/String;Lnet/minecraft/crash/ICrashReportDetail;)V", false);
mv.visitTypeInsn(NEW, "net/minecraft/util/ReportedException");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/ReportedException", "<init>", "(Lnet/minecraft/crash/CrashReport;)V", false);
mv.visitInsn(ATHROW);
mv.visitMaxs(5, 7);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setBlockState", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;)Lnet/minecraft/block/state/IBlockState;", null, null);
{
av0 = mv.visitAnnotation("Ljavax/annotation/Nullable;", true);
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getY", "()I", false);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IOR);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "precipitationHeightMap", "[I");
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(IALOAD);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "precipitationHeightMap", "[I");
mv.visitVarInsn(ILOAD, 6);
mv.visitIntInsn(SIPUSH, -999);
mv.visitInsn(IASTORE);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/util/math/BlockPos", "net/minecraft/block/state/IBlockState", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(IALOAD);
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockState", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitVarInsn(ASTORE, 8);
mv.visitVarInsn(ALOAD, 8);
mv.visitVarInsn(ALOAD, 2);
Label l1 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l1);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, "net/minecraft/block/state/IBlockState"}, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getBlock", "()Lnet/minecraft/block/Block;", true);
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getBlock", "()Lnet/minecraft/block/Block;", true);
mv.visitVarInsn(ASTORE, 10);
mv.visitVarInsn(ALOAD, 8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getLightOpacity", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/math/BlockPos;)I", true);
mv.visitVarInsn(ISTORE, 11);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 12);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 13);
mv.visitVarInsn(ALOAD, 12);
Label l2 = new Label();
mv.visitJumpInsn(IFNONNULL, l2);
mv.visitVarInsn(ALOAD, 9);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/init/Blocks", "AIR", "Lnet/minecraft/block/Block;");
Label l3 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l3);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_FULL, 14, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/util/math/BlockPos", "net/minecraft/block/state/IBlockState", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "net/minecraft/block/state/IBlockState", "net/minecraft/block/Block", "net/minecraft/block/Block", Opcodes.INTEGER, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitTypeInsn(NEW, "net/minecraft/world/chunk/storage/ExtendedBlockStorage");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "<init>", "(IZ)V", false);
mv.visitVarInsn(ASTORE, 12);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitVarInsn(ALOAD, 12);
mv.visitInsn(AASTORE);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 7);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l4);
mv.visitInsn(ICONST_1);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 13);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 12);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "set", "(IIILnet/minecraft/block/state/IBlockState;)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "isRemote", "Z");
Label l6 = new Label();
mv.visitJumpInsn(IFNE, l6);
mv.visitVarInsn(ALOAD, 10);
mv.visitVarInsn(ALOAD, 9);
Label l7 = new Label();
mv.visitJumpInsn(IF_ACMPEQ, l7);
mv.visitVarInsn(ALOAD, 10);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "breakBlock", "(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;)V", false);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk$EnumCreateEntityType", "CHECK", "Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getTileEntity", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;)Lnet/minecraft/tileentity/TileEntity;", false);
mv.visitVarInsn(ASTORE, 14);
mv.visitVarInsn(ALOAD, 14);
Label l8 = new Label();
mv.visitJumpInsn(IFNULL, l8);
mv.visitVarInsn(ALOAD, 14);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 8);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "shouldRefresh", "(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/block/state/IBlockState;)Z", false);
mv.visitJumpInsn(IFEQ, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "removeTileEntity", "(Lnet/minecraft/util/math/BlockPos;)V", false);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
Label l9 = new Label();
mv.visitJumpInsn(GOTO, l9);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 10);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "hasTileEntity", "(Lnet/minecraft/block/state/IBlockState;)Z", false);
mv.visitJumpInsn(IFEQ, l9);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk$EnumCreateEntityType", "CHECK", "Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getTileEntity", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;)Lnet/minecraft/tileentity/TileEntity;", false);
mv.visitVarInsn(ASTORE, 14);
mv.visitVarInsn(ALOAD, 14);
mv.visitJumpInsn(IFNULL, l9);
mv.visitVarInsn(ALOAD, 14);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 8);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "shouldRefresh", "(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/block/state/IBlockState;)Z", false);
mv.visitJumpInsn(IFEQ, l9);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "removeTileEntity", "(Lnet/minecraft/util/math/BlockPos;)V", false);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 12);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "get", "(III)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getBlock", "()Lnet/minecraft/block/Block;", true);
mv.visitVarInsn(ALOAD, 9);
Label l10 = new Label();
mv.visitJumpInsn(IF_ACMPEQ, l10);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 13);
Label l11 = new Label();
mv.visitJumpInsn(IFEQ, l11);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "generateSkylightMap", "()V", false);
Label l12 = new Label();
mv.visitJumpInsn(GOTO, l12);
mv.visitLabel(l11);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getLightOpacity", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/math/BlockPos;)I", true);
mv.visitVarInsn(ISTORE, 14);
mv.visitVarInsn(ILOAD, 14);
Label l13 = new Label();
mv.visitJumpInsn(IFLE, l13);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 7);
Label l14 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l14);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "relightBlock", "(III)V", false);
mv.visitJumpInsn(GOTO, l14);
mv.visitLabel(l13);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitJumpInsn(IF_ICMPNE, l14);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "relightBlock", "(III)V", false);
mv.visitLabel(l14);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 14);
mv.visitVarInsn(ILOAD, 11);
mv.visitJumpInsn(IF_ICMPEQ, l12);
mv.visitVarInsn(ILOAD, 14);
mv.visitVarInsn(ILOAD, 11);
Label l15 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l15);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/EnumSkyBlock", "SKY", "Lnet/minecraft/world/EnumSkyBlock;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/math/BlockPos;)I", false);
mv.visitJumpInsn(IFGT, l15);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/EnumSkyBlock", "BLOCK", "Lnet/minecraft/world/EnumSkyBlock;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/math/BlockPos;)I", false);
mv.visitJumpInsn(IFLE, l12);
mv.visitLabel(l15);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "propagateSkylightOcclusion", "(II)V", false);
mv.visitLabel(l12);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "isRemote", "Z");
Label l16 = new Label();
mv.visitJumpInsn(IFNE, l16);
mv.visitVarInsn(ALOAD, 10);
mv.visitVarInsn(ALOAD, 9);
mv.visitJumpInsn(IF_ACMPEQ, l16);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "captureBlockSnapshots", "Z");
Label l17 = new Label();
mv.visitJumpInsn(IFEQ, l17);
mv.visitVarInsn(ALOAD, 9);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "hasTileEntity", "(Lnet/minecraft/block/state/IBlockState;)Z", false);
mv.visitJumpInsn(IFEQ, l16);
mv.visitLabel(l17);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 9);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "onBlockAdded", "(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;)V", false);
mv.visitLabel(l16);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 9);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "hasTileEntity", "(Lnet/minecraft/block/state/IBlockState;)Z", false);
Label l18 = new Label();
mv.visitJumpInsn(IFEQ, l18);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk$EnumCreateEntityType", "CHECK", "Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getTileEntity", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;)Lnet/minecraft/tileentity/TileEntity;", false);
mv.visitVarInsn(ASTORE, 14);
mv.visitVarInsn(ALOAD, 14);
Label l19 = new Label();
mv.visitJumpInsn(IFNONNULL, l19);
mv.visitVarInsn(ALOAD, 9);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "createTileEntity", "(Lnet/minecraft/world/World;Lnet/minecraft/block/state/IBlockState;)Lnet/minecraft/tileentity/TileEntity;", false);
mv.visitVarInsn(ASTORE, 14);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 14);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "setTileEntity", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/tileentity/TileEntity;)V", false);
mv.visitLabel(l19);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/tileentity/TileEntity"}, 0, null);
mv.visitVarInsn(ALOAD, 14);
mv.visitJumpInsn(IFNULL, l18);
mv.visitVarInsn(ALOAD, 14);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "updateContainingBlockInfo", "()V", false);
mv.visitLabel(l18);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "dirty", "Z");
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 15);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/math/BlockPos;)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/EnumSkyBlock", "BLOCK", "Lnet/minecraft/world/EnumSkyBlock;");
Label l0 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getY", "()I", false);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
Label l1 = new Label();
mv.visitJumpInsn(IFNONNULL, l1);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, "net/minecraft/world/chunk/storage/ExtendedBlockStorage"}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "moddedBlockLights", "Ljava/util/HashMap;");
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
mv.visitTypeInsn(CHECKCAST, "java/lang/Integer");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Integer", "intValue", "()I", false);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 5);
mv.visitIntInsn(BIPUSH, 15);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l2);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IRETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "getBlockLight", "(III)I", false);
mv.visitVarInsn(ISTORE, 8);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 8);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l3);
mv.visitVarInsn(ILOAD, 8);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 5);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 3, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/world/EnumSkyBlock", "net/minecraft/util/math/BlockPos"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
Label l5 = new Label();
mv.visitJumpInsn(IFNE, l5);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getY", "()I", false);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(SIPUSH, 255);
Label l6 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l6);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IRETURN);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
Label l7 = new Label();
mv.visitJumpInsn(IFNONNULL, l7);
mv.visitInsn(ICONST_0);
Label l8 = new Label();
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/world/chunk/storage/ExtendedBlockStorage"}, 0, null);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "getSkyLight", "(III)I", false);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitMaxs(5, 9);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setLightFor", "(Lnet/minecraft/world/EnumSkyBlock;Lnet/minecraft/util/math/BlockPos;I)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getY", "()I", false);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 7);
mv.visitVarInsn(ALOAD, 7);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitTypeInsn(NEW, "net/minecraft/world/chunk/storage/ExtendedBlockStorage");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "<init>", "(IZ)V", false);
mv.visitVarInsn(ASTORE, 7);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitVarInsn(ALOAD, 7);
mv.visitInsn(AASTORE);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "generateSkylightMap", "()V", false);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/world/EnumSkyBlock", "net/minecraft/util/math/BlockPos", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "net/minecraft/world/chunk/storage/ExtendedBlockStorage"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "dirty", "Z");
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/EnumSkyBlock", "SKY", "Lnet/minecraft/world/EnumSkyBlock;");
Label l1 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 5);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "setSkyLight", "(IIII)V", false);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/EnumSkyBlock", "BLOCK", "Lnet/minecraft/world/EnumSkyBlock;");
mv.visitJumpInsn(IF_ACMPNE, l2);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 5);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "setBlockLight", "(IIII)V", false);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(5, 8);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getLightSubtracted", "(Lnet/minecraft/util/math/BlockPos;I)I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getY", "()I", false);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 6);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ILOAD, 2);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/EnumSkyBlock", "SKY", "Lnet/minecraft/world/EnumSkyBlock;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/EnumSkyBlock", "defaultLightValue", "I");
mv.visitJumpInsn(IF_ICMPGE, l1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/EnumSkyBlock", "SKY", "Lnet/minecraft/world/EnumSkyBlock;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/EnumSkyBlock", "defaultLightValue", "I");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ISUB);
Label l2 = new Label();
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/util/math/BlockPos", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "net/minecraft/world/chunk/storage/ExtendedBlockStorage"}, 0, new Object[] {});
mv.visitInsn(ICONST_0);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "moddedBlockLights", "Ljava/util/HashMap;");
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
mv.visitTypeInsn(CHECKCAST, "java/lang/Integer");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Integer", "intValue", "()I", false);
mv.visitVarInsn(ISTORE, 7);
mv.visitVarInsn(ILOAD, 7);
mv.visitIntInsn(BIPUSH, 15);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l3);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IRETURN);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "getBlockLight", "(III)I", false);
mv.visitVarInsn(ISTORE, 8);
mv.visitVarInsn(ILOAD, 8);
mv.visitIntInsn(BIPUSH, 15);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l4);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IRETURN);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ILOAD, 8);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l5);
mv.visitVarInsn(ILOAD, 8);
Label l6 = new Label();
mv.visitJumpInsn(GOTO, l6);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 7);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 9);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
Label l7 = new Label();
mv.visitJumpInsn(IFNE, l7);
mv.visitInsn(ICONST_0);
Label l8 = new Label();
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "getSkyLight", "(III)I", false);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ISUB);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 10);
mv.visitVarInsn(ILOAD, 9);
mv.visitVarInsn(ILOAD, 10);
Label l9 = new Label();
mv.visitJumpInsn(IF_ICMPLE, l9);
mv.visitVarInsn(ILOAD, 9);
Label l10 = new Label();
mv.visitJumpInsn(GOTO, l10);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 10);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitMaxs(4, 11);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "addEntity", "(Lnet/minecraft/entity/Entity;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "hasEntities", "Z");
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "net/minecraft/entity/Entity", "posX", "D");
mv.visitLdcInsn(new Double("16.0"));
mv.visitInsn(DDIV);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/util/math/MathHelper", "floor", "(D)I", false);
mv.visitVarInsn(ISTORE, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "net/minecraft/entity/Entity", "posZ", "D");
mv.visitLdcInsn(new Double("16.0"));
mv.visitInsn(DDIV);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/util/math/MathHelper", "floor", "(D)I", false);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l0);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk", "LOGGER", "Lorg/apache/logging/log4j/Logger;");
mv.visitLdcInsn("Wrong location! ({}, {}) should be ({}, {}), {}");
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "org/apache/logging/log4j/Logger", "warn", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V", true);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/entity/Entity", "setDead", "()V", false);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "net/minecraft/entity/Entity", "posY", "D");
mv.visitLdcInsn(new Double("16.0"));
mv.visitInsn(DDIV);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/util/math/MathHelper", "floor", "(D)I", false);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 4);
Label l2 = new Label();
mv.visitJumpInsn(IFGE, l2);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 4);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitInsn(ARRAYLENGTH);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitFieldInsn(GETSTATIC, "net/minecraftforge/common/MinecraftForge", "EVENT_BUS", "Lnet/minecraftforge/fml/common/eventhandler/EventBus;");
mv.visitTypeInsn(NEW, "net/minecraftforge/event/entity/EntityEvent$EnteringChunk");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "net/minecraft/entity/Entity", "chunkCoordX", "I");
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "net/minecraft/entity/Entity", "chunkCoordZ", "I");
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraftforge/event/entity/EntityEvent$EnteringChunk", "<init>", "(Lnet/minecraft/entity/Entity;IIII)V", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraftforge/fml/common/eventhandler/EventBus", "post", "(Lnet/minecraftforge/fml/common/eventhandler/Event;)Z", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/entity/Entity", "addedToChunk", "Z");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitFieldInsn(PUTFIELD, "net/minecraft/entity/Entity", "chunkCoordX", "I");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 4);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/entity/Entity", "chunkCoordY", "I");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitFieldInsn(PUTFIELD, "net/minecraft/entity/Entity", "chunkCoordZ", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/ClassInheritanceMultiMap", "add", "(Ljava/lang/Object;)Z", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "markDirty", "()V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(8, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "removeEntity", "(Lnet/minecraft/entity/Entity;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "net/minecraft/entity/Entity", "chunkCoordY", "I");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "removeEntityAtIndex", "(Lnet/minecraft/entity/Entity;I)V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "removeEntityAtIndex", "(Lnet/minecraft/entity/Entity;I)V", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFGE, l0);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 2);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/ClassInheritanceMultiMap", "remove", "(Ljava/lang/Object;)Z", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "markDirty", "()V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "canSeeSky", "(Lnet/minecraft/util/math/BlockPos;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getY", "()I", false);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IOR);
mv.visitInsn(IALOAD);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l0);
mv.visitInsn(ICONST_1);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitInsn(ICONST_0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitMaxs(4, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "createNewTileEntity", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/tileentity/TileEntity;", null, null);
{
av0 = mv.visitAnnotation("Ljavax/annotation/Nullable;", true);
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockState", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getBlock", "()Lnet/minecraft/block/Block;", true);
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "hasTileEntity", "(Lnet/minecraft/block/state/IBlockState;)Z", false);
Label l0 = new Label();
mv.visitJumpInsn(IFNE, l0);
mv.visitInsn(ACONST_NULL);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"net/minecraft/block/state/IBlockState", "net/minecraft/block/Block"}, 0, null);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "createTileEntity", "(Lnet/minecraft/world/World;Lnet/minecraft/block/state/IBlockState;)Lnet/minecraft/tileentity/TileEntity;", false);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"net/minecraft/tileentity/TileEntity"});
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getTileEntity", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;)Lnet/minecraft/tileentity/TileEntity;", null, null);
{
av0 = mv.visitAnnotation("Ljavax/annotation/Nullable;", true);
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/tileentity/TileEntity");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "isInvalid", "()Z", false);
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "remove", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
mv.visitInsn(POP);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 3);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/tileentity/TileEntity"}, 0, null);
mv.visitVarInsn(ALOAD, 3);
Label l1 = new Label();
mv.visitJumpInsn(IFNONNULL, l1);
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk$EnumCreateEntityType", "IMMEDIATE", "Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;");
Label l2 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "createNewTileEntity", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/tileentity/TileEntity;", false);
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "setTileEntity", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/tileentity/TileEntity;)V", false);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk$EnumCreateEntityType", "QUEUED", "Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;");
mv.visitJumpInsn(IF_ACMPNE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntityPosQueue", "Ljava/util/concurrent/ConcurrentLinkedQueue;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "toImmutable", "()Lnet/minecraft/util/math/BlockPos;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/ConcurrentLinkedQueue", "add", "(Ljava/lang/Object;)Z", false);
mv.visitInsn(POP);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "addTileEntity", "(Lnet/minecraft/tileentity/TileEntity;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "getPos", "()Lnet/minecraft/util/math/BlockPos;", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "addTileEntity", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/tileentity/TileEntity;)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "loaded", "Z");
Label l0 = new Label();
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "addTileEntity", "(Lnet/minecraft/tileentity/TileEntity;)Z", false);
mv.visitInsn(POP);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "addTileEntity", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/tileentity/TileEntity;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "getWorld", "()Lnet/minecraft/world/World;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
Label l0 = new Label();
mv.visitJumpInsn(IF_ACMPEQ, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "setWorld", "(Lnet/minecraft/world/World;)V", false);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "setPos", "(Lnet/minecraft/util/math/BlockPos;)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockState", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getBlock", "()Lnet/minecraft/block/Block;", true);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockState", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "hasTileEntity", "(Lnet/minecraft/block/state/IBlockState;)Z", false);
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "containsKey", "(Ljava/lang/Object;)Z", true);
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/tileentity/TileEntity");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "invalidate", "()V", false);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "validate", "()V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
mv.visitInsn(POP);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "removeTileEntity", "(Lnet/minecraft/util/math/BlockPos;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "loaded", "Z");
Label l0 = new Label();
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "remove", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/tileentity/TileEntity");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "invalidate", "()V", false);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "onLoad", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "loaded", "Z");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "values", "()Ljava/util/Collection;", true);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "addTileEntities", "(Ljava/util/Collection;)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 2);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"[Lnet/minecraft/util/ClassInheritanceMultiMap;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 2);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKESTATIC, "com/google/common/collect/ImmutableList", "copyOf", "(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableList;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "loadEntities", "(Ljava/util/Collection;)V", false);
mv.visitIincInsn(3, 1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
mv.visitFieldInsn(GETSTATIC, "net/minecraftforge/common/MinecraftForge", "EVENT_BUS", "Lnet/minecraftforge/fml/common/eventhandler/EventBus;");
mv.visitTypeInsn(NEW, "net/minecraftforge/event/world/ChunkEvent$Load");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraftforge/event/world/ChunkEvent$Load", "<init>", "(Lnet/minecraft/world/chunk/Chunk;)V", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraftforge/fml/common/eventhandler/EventBus", "post", "(Lnet/minecraftforge/fml/common/eventhandler/Event;)Z", false);
mv.visitInsn(POP);
mv.visitInsn(RETURN);
mv.visitMaxs(4, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "onUnload", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "stream", "([Ljava/lang/Object;)Ljava/util/stream/Stream;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitInvokeDynamicInsn("accept", "(Lnet/minecraft/world/chunk/Chunk;)Ljava/util/function/Consumer;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"), new Object[]{Type.getType("(Ljava/lang/Object;)V"), new Handle(Opcodes.H_INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "lambda$onUnload$2", "(Lnet/minecraft/util/ClassInheritanceMultiMap;)V"), Type.getType("(Lnet/minecraft/util/ClassInheritanceMultiMap;)V")});
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/stream/Stream", "forEach", "(Ljava/util/function/Consumer;)V", true);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "loaded", "Z");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "values", "()Ljava/util/Collection;", true);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Collection", "iterator", "()Ljava/util/Iterator;", true);
mv.visitVarInsn(ASTORE, 1);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/util/Iterator"}, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/tileentity/TileEntity");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "markTileEntityForRemoval", "(Lnet/minecraft/tileentity/TileEntity;)V", false);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 2);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"[Lnet/minecraft/util/ClassInheritanceMultiMap;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 2);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l3);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "unloadEntities", "(Ljava/util/Collection;)V", false);
mv.visitIincInsn(3, 1);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
mv.visitFieldInsn(GETSTATIC, "net/minecraftforge/common/MinecraftForge", "EVENT_BUS", "Lnet/minecraftforge/fml/common/eventhandler/EventBus;");
mv.visitTypeInsn(NEW, "net/minecraftforge/event/world/ChunkEvent$Unload");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraftforge/event/world/ChunkEvent$Unload", "<init>", "(Lnet/minecraft/world/chunk/Chunk;)V", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraftforge/fml/common/eventhandler/EventBus", "post", "(Lnet/minecraftforge/fml/common/eventhandler/Event;)Z", false);
mv.visitInsn(POP);
mv.visitInsn(RETURN);
mv.visitMaxs(4, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "markDirty", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "dirty", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getEntitiesWithinAABBForEntity", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/util/math/AxisAlignedBB;Ljava/util/List;Lcom/google/common/base/Predicate;)V", "(Lnet/minecraft/entity/Entity;Lnet/minecraft/util/math/AxisAlignedBB;Ljava/util/List<Lnet/minecraft/entity/Entity;>;Lcom/google/common/base/Predicate<-Lnet/minecraft/entity/Entity;>;)V", null);
{
av0 = mv.visitParameterAnnotation(0, "Ljavax/annotation/Nullable;", true);
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETFIELD, "net/minecraft/util/math/AxisAlignedBB", "minY", "D");
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/World", "MAX_ENTITY_RADIUS", "D");
mv.visitInsn(DSUB);
mv.visitLdcInsn(new Double("16.0"));
mv.visitInsn(DDIV);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/util/math/MathHelper", "floor", "(D)I", false);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETFIELD, "net/minecraft/util/math/AxisAlignedBB", "maxY", "D");
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/World", "MAX_ENTITY_RADIUS", "D");
mv.visitInsn(DADD);
mv.visitLdcInsn(new Double("16.0"));
mv.visitInsn(DDIV);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/util/math/MathHelper", "floor", "(D)I", false);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/util/math/MathHelper", "clamp", "(III)I", false);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/util/math/MathHelper", "clamp", "(III)I", false);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ISTORE, 7);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ILOAD, 6);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGT, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(AALOAD);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/ClassInheritanceMultiMap", "isEmpty", "()Z", false);
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(AALOAD);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/ClassInheritanceMultiMap", "iterator", "()Ljava/util/Iterator;", false);
mv.visitVarInsn(ASTORE, 8);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/util/Iterator"}, 0, null);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/entity/Entity");
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/entity/Entity", "getEntityBoundingBox", "()Lnet/minecraft/util/math/AxisAlignedBB;", false);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/AxisAlignedBB", "intersects", "(Lnet/minecraft/util/math/AxisAlignedBB;)Z", false);
Label l4 = new Label();
mv.visitJumpInsn(IFEQ, l4);
mv.visitVarInsn(ALOAD, 9);
mv.visitVarInsn(ALOAD, 1);
mv.visitJumpInsn(IF_ACMPEQ, l4);
mv.visitVarInsn(ALOAD, 4);
Label l5 = new Label();
mv.visitJumpInsn(IFNULL, l5);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEINTERFACE, "com/google/common/base/Predicate", "apply", "(Ljava/lang/Object;)Z", true);
Label l6 = new Label();
mv.visitJumpInsn(IFEQ, l6);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/entity/Entity"}, 0, null);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
mv.visitInsn(POP);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/entity/Entity", "getParts", "()[Lnet/minecraft/entity/Entity;", false);
mv.visitVarInsn(ASTORE, 10);
mv.visitVarInsn(ALOAD, 10);
mv.visitJumpInsn(IFNULL, l4);
mv.visitVarInsn(ALOAD, 10);
mv.visitVarInsn(ASTORE, 11);
mv.visitVarInsn(ALOAD, 11);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 12);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 13);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_FULL, 14, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/entity/Entity", "net/minecraft/util/math/AxisAlignedBB", "java/util/List", "com/google/common/base/Predicate", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "java/util/Iterator", "net/minecraft/entity/Entity", "[Lnet/minecraft/entity/Entity;", "[Lnet/minecraft/entity/Entity;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 13);
mv.visitVarInsn(ILOAD, 12);
mv.visitJumpInsn(IF_ICMPGE, l4);
mv.visitVarInsn(ALOAD, 11);
mv.visitVarInsn(ILOAD, 13);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 14);
mv.visitVarInsn(ALOAD, 14);
mv.visitVarInsn(ALOAD, 1);
Label l8 = new Label();
mv.visitJumpInsn(IF_ACMPEQ, l8);
mv.visitVarInsn(ALOAD, 14);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/entity/Entity", "getEntityBoundingBox", "()Lnet/minecraft/util/math/AxisAlignedBB;", false);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/AxisAlignedBB", "intersects", "(Lnet/minecraft/util/math/AxisAlignedBB;)Z", false);
mv.visitJumpInsn(IFEQ, l8);
mv.visitVarInsn(ALOAD, 4);
Label l9 = new Label();
mv.visitJumpInsn(IFNULL, l9);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 14);
mv.visitMethodInsn(INVOKEINTERFACE, "com/google/common/base/Predicate", "apply", "(Ljava/lang/Object;)Z", true);
mv.visitJumpInsn(IFEQ, l8);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/entity/Entity"}, 0, null);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 14);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
mv.visitInsn(POP);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(13, 1);
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_FULL, 9, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/entity/Entity", "net/minecraft/util/math/AxisAlignedBB", "java/util/List", "com/google/common/base/Predicate", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "java/util/Iterator"}, 0, new Object[] {});
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(7, 1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(4, 15);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getEntitiesOfTypeWithinAABB", "(Ljava/lang/Class;Lnet/minecraft/util/math/AxisAlignedBB;Ljava/util/List;Lcom/google/common/base/Predicate;)V", "<T:Lnet/minecraft/entity/Entity;>(Ljava/lang/Class<+TT;>;Lnet/minecraft/util/math/AxisAlignedBB;Ljava/util/List<TT;>;Lcom/google/common/base/Predicate<-TT;>;)V", null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETFIELD, "net/minecraft/util/math/AxisAlignedBB", "minY", "D");
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/World", "MAX_ENTITY_RADIUS", "D");
mv.visitInsn(DSUB);
mv.visitLdcInsn(new Double("16.0"));
mv.visitInsn(DDIV);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/util/math/MathHelper", "floor", "(D)I", false);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETFIELD, "net/minecraft/util/math/AxisAlignedBB", "maxY", "D");
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/World", "MAX_ENTITY_RADIUS", "D");
mv.visitInsn(DADD);
mv.visitLdcInsn(new Double("16.0"));
mv.visitInsn(DDIV);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/util/math/MathHelper", "floor", "(D)I", false);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/util/math/MathHelper", "clamp", "(III)I", false);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitInsn(ARRAYLENGTH);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/util/math/MathHelper", "clamp", "(III)I", false);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ISTORE, 7);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ILOAD, 6);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGT, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/ClassInheritanceMultiMap", "getByClass", "(Ljava/lang/Class;)Ljava/lang/Iterable;", false);
mv.visitMethodInsn(INVOKEINTERFACE, "java/lang/Iterable", "iterator", "()Ljava/util/Iterator;", true);
mv.visitVarInsn(ASTORE, 8);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/util/Iterator"}, 0, null);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label l3 = new Label();
mv.visitJumpInsn(IFEQ, l3);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/entity/Entity");
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/entity/Entity", "getEntityBoundingBox", "()Lnet/minecraft/util/math/AxisAlignedBB;", false);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/AxisAlignedBB", "intersects", "(Lnet/minecraft/util/math/AxisAlignedBB;)Z", false);
Label l4 = new Label();
mv.visitJumpInsn(IFEQ, l4);
mv.visitVarInsn(ALOAD, 4);
Label l5 = new Label();
mv.visitJumpInsn(IFNULL, l5);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEINTERFACE, "com/google/common/base/Predicate", "apply", "(Ljava/lang/Object;)Z", true);
mv.visitJumpInsn(IFEQ, l4);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/entity/Entity"}, 0, null);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
mv.visitInsn(POP);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(7, 1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(4, 10);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "needsSaving", "(Z)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "hasEntities", "Z");
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "getTotalWorldTime", "()J", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "lastSaveTime", "J");
mv.visitInsn(LCMP);
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "dirty", "Z");
Label l3 = new Label();
mv.visitJumpInsn(IFEQ, l3);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "hasEntities", "Z");
mv.visitJumpInsn(IFEQ, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "getTotalWorldTime", "()J", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "lastSaveTime", "J");
mv.visitLdcInsn(new Long(600L));
mv.visitInsn(LADD);
mv.visitInsn(LCMP);
mv.visitJumpInsn(IFLT, l3);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "dirty", "Z");
mv.visitInsn(IRETURN);
mv.visitMaxs(6, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getRandomWithSeed", "(J)Ljava/util/Random;", null, null);
mv.visitCode();
mv.visitTypeInsn(NEW, "java/util/Random");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "getSeed", "()J", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(IMUL);
mv.visitLdcInsn(new Integer(4987142));
mv.visitInsn(IMUL);
mv.visitInsn(I2L);
mv.visitInsn(LADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitLdcInsn(new Integer(5947611));
mv.visitInsn(IMUL);
mv.visitInsn(I2L);
mv.visitInsn(LADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(IMUL);
mv.visitInsn(I2L);
mv.visitLdcInsn(new Long(4392871L));
mv.visitInsn(LMUL);
mv.visitInsn(LADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitLdcInsn(new Integer(389711));
mv.visitInsn(IMUL);
mv.visitInsn(I2L);
mv.visitInsn(LADD);
mv.visitVarInsn(LLOAD, 1);
mv.visitInsn(LXOR);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/Random", "<init>", "(J)V", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(8, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "isEmpty", "()Z", null, null);
mv.visitCode();
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "populate", "(Lnet/minecraft/world/chunk/IChunkProvider;Lnet/minecraft/world/gen/IChunkGenerator;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/world/chunk/IChunkProvider", "getLoadedChunk", "(II)Lnet/minecraft/world/chunk/Chunk;", true);
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/world/chunk/IChunkProvider", "getLoadedChunk", "(II)Lnet/minecraft/world/chunk/Chunk;", true);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/world/chunk/IChunkProvider", "getLoadedChunk", "(II)Lnet/minecraft/world/chunk/Chunk;", true);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/world/chunk/IChunkProvider", "getLoadedChunk", "(II)Lnet/minecraft/world/chunk/Chunk;", true);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 4);
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 5);
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/world/chunk/IChunkProvider", "getLoadedChunk", "(II)Lnet/minecraft/world/chunk/Chunk;", true);
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "populate", "(Lnet/minecraft/world/gen/IChunkGenerator;)V", false);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/world/chunk/IChunkProvider", "net/minecraft/world/gen/IChunkGenerator", "net/minecraft/world/chunk/Chunk", "net/minecraft/world/chunk/Chunk", "net/minecraft/world/chunk/Chunk", "net/minecraft/world/chunk/Chunk"}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 6);
Label l1 = new Label();
mv.visitJumpInsn(IFNULL, l1);
mv.visitVarInsn(ALOAD, 5);
mv.visitJumpInsn(IFNULL, l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/world/chunk/IChunkProvider", "getLoadedChunk", "(II)Lnet/minecraft/world/chunk/Chunk;", true);
mv.visitJumpInsn(IFNULL, l1);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "populate", "(Lnet/minecraft/world/gen/IChunkGenerator;)V", false);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 3);
Label l2 = new Label();
mv.visitJumpInsn(IFNULL, l2);
mv.visitVarInsn(ALOAD, 4);
mv.visitJumpInsn(IFNULL, l2);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/world/chunk/IChunkProvider", "getLoadedChunk", "(II)Lnet/minecraft/world/chunk/Chunk;", true);
mv.visitJumpInsn(IFNULL, l2);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "populate", "(Lnet/minecraft/world/gen/IChunkGenerator;)V", false);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 3);
Label l3 = new Label();
mv.visitJumpInsn(IFNULL, l3);
mv.visitVarInsn(ALOAD, 6);
mv.visitJumpInsn(IFNULL, l3);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/world/chunk/IChunkProvider", "getLoadedChunk", "(II)Lnet/minecraft/world/chunk/Chunk;", true);
mv.visitVarInsn(ASTORE, 7);
mv.visitVarInsn(ALOAD, 7);
mv.visitJumpInsn(IFNULL, l3);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "populate", "(Lnet/minecraft/world/gen/IChunkGenerator;)V", false);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(4, 8);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED, "populate", "(Lnet/minecraft/world/gen/IChunkGenerator;)V", null, null);
mv.visitCode();
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk", "populating", "Lnet/minecraft/util/math/ChunkPos;");
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitFieldInsn(GETSTATIC, "net/minecraftforge/common/ForgeModContainer", "logCascadingWorldGeneration", "Z");
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "logCascadingWorldGeneration", "()V", false);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk", "populating", "Lnet/minecraft/util/math/ChunkPos;");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getPos", "()Lnet/minecraft/util/math/ChunkPos;", false);
mv.visitFieldInsn(PUTSTATIC, "net/minecraft/world/chunk/Chunk", "populating", "Lnet/minecraft/util/math/ChunkPos;");
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "isTerrainPopulated", "()Z", false);
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/world/gen/IChunkGenerator", "generateStructures", "(Lnet/minecraft/world/chunk/Chunk;II)Z", true);
Label l2 = new Label();
mv.visitJumpInsn(IFEQ, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "markDirty", "()V", false);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/util/math/ChunkPos"}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "checkLight", "()V", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/world/gen/IChunkGenerator", "populate", "(II)V", true);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "getChunkProvider", "()Lnet/minecraft/world/chunk/IChunkProvider;", false);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraftforge/fml/common/registry/GameRegistry", "generateWorld", "(IILnet/minecraft/world/World;Lnet/minecraft/world/gen/IChunkGenerator;Lnet/minecraft/world/chunk/IChunkProvider;)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "markDirty", "()V", false);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(PUTSTATIC, "net/minecraft/world/chunk/Chunk", "populating", "Lnet/minecraft/util/math/ChunkPos;");
mv.visitInsn(RETURN);
mv.visitMaxs(5, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getPrecipitationHeight", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/util/math/BlockPos;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitInsn(IOR);
mv.visitVarInsn(ISTORE, 4);
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "precipitationHeightMap", "[I");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IALOAD);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getY", "()I", false);
mv.visitIntInsn(SIPUSH, -999);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getTopFilledSegment", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 6);
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitVarInsn(ASTORE, 5);
mv.visitInsn(ICONST_M1);
mv.visitVarInsn(ISTORE, 7);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/util/math/BlockPos", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "net/minecraft/util/math/BlockPos", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getY", "()I", false);
Label l2 = new Label();
mv.visitJumpInsn(IFLE, l2);
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(ICONST_M1);
mv.visitJumpInsn(IF_ICMPNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockState", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitVarInsn(ASTORE, 8);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getMaterial", "()Lnet/minecraft/block/material/Material;", true);
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/material/Material", "blocksMovement", "()Z", false);
Label l3 = new Label();
mv.visitJumpInsn(IFNE, l3);
mv.visitVarInsn(ALOAD, 9);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/material/Material", "isLiquid", "()Z", false);
mv.visitJumpInsn(IFNE, l3);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "down", "()Lnet/minecraft/util/math/BlockPos;", false);
mv.visitVarInsn(ASTORE, 5);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"net/minecraft/block/state/IBlockState", "net/minecraft/block/material/Material"}, 0, null);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getY", "()I", false);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 7);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "precipitationHeightMap", "[I");
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 7);
mv.visitInsn(IASTORE);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "precipitationHeightMap", "[I");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(IALOAD);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 10);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "onTick", "(Z)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "isGapLightingUpdated", "Z");
Label l0 = new Label();
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ILOAD, 1);
mv.visitJumpInsn(IFNE, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "isRemote", "Z");
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "recheckGaps", "(Z)V", false);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "ticked", "Z");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "isLightPopulated", "Z");
Label l1 = new Label();
mv.visitJumpInsn(IFNE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "isTerrainPopulated", "Z");
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "checkLight", "()V", false);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntityPosQueue", "Ljava/util/concurrent/ConcurrentLinkedQueue;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/ConcurrentLinkedQueue", "isEmpty", "()Z", false);
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntityPosQueue", "Ljava/util/concurrent/ConcurrentLinkedQueue;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/ConcurrentLinkedQueue", "poll", "()Ljava/lang/Object;", false);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/util/math/BlockPos");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk$EnumCreateEntityType", "CHECK", "Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getTileEntity", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/world/chunk/Chunk$EnumCreateEntityType;)Lnet/minecraft/tileentity/TileEntity;", false);
Label l3 = new Label();
mv.visitJumpInsn(IFNONNULL, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockState", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getBlock", "()Lnet/minecraft/block/Block;", true);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockState", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "hasTileEntity", "(Lnet/minecraft/block/state/IBlockState;)Z", false);
mv.visitJumpInsn(IFEQ, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "createNewTileEntity", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/tileentity/TileEntity;", false);
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "setTileEntity", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/tileentity/TileEntity;)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "markBlockRangeForRenderUpdate", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/util/math/BlockPos;)V", false);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "isPopulated", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "ticked", "Z");
Label l0 = new Label();
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "isTerrainPopulated", "Z");
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "isLightPopulated", "Z");
mv.visitJumpInsn(IFEQ, l0);
mv.visitInsn(ICONST_1);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "wasTicked", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "ticked", "Z");
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getPos", "()Lnet/minecraft/util/math/ChunkPos;", null, null);
mv.visitCode();
mv.visitTypeInsn(NEW, "net/minecraft/util/math/ChunkPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/ChunkPos", "<init>", "(II)V", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "isEmptyBetween", "(II)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ILOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFGE, l0);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(SIPUSH, 256);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l1);
mv.visitIntInsn(SIPUSH, 255);
mv.visitVarInsn(ISTORE, 2);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ISTORE, 3);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 2);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPGT, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHR);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
Label l4 = new Label();
mv.visitJumpInsn(IFNULL, l4);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "isEmpty", "()Z", false);
mv.visitJumpInsn(IFNE, l4);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(3, 16);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setStorageArrays", "([Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l0);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk", "LOGGER", "Lorg/apache/logging/log4j/Logger;");
mv.visitLdcInsn("Could not set level chunk sections, array length is {} instead of {}");
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitMethodInsn(INVOKEINTERFACE, "org/apache/logging/log4j/Logger", "warn", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", true);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(5, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "read", "(Lnet/minecraft/network/PacketBuffer;IZ)V", null, null);
{
av0 = mv.visitAnnotation("Lnet/minecraftforge/fml/relauncher/SideOnly;", true);
av0.visitEnum("value", "Lnet/minecraftforge/fml/relauncher/Side;", "CLIENT");
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "values", "()Ljava/util/Collection;", true);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Collection", "iterator", "()Ljava/util/Iterator;", true);
mv.visitVarInsn(ASTORE, 4);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/util/Iterator"}, 0, null);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/tileentity/TileEntity");
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "updateContainingBlockInfo", "()V", false);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "getBlockMetadata", "()I", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "getBlockType", "()Lnet/minecraft/block/Block;", false);
mv.visitInsn(POP);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
mv.visitVarInsn(ISTORE, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 5);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitInsn(ARRAYLENGTH);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ISHL);
mv.visitInsn(IAND);
Label l4 = new Label();
mv.visitJumpInsn(IFNE, l4);
mv.visitVarInsn(ILOAD, 3);
Label l5 = new Label();
mv.visitJumpInsn(IFEQ, l5);
mv.visitVarInsn(ALOAD, 6);
mv.visitJumpInsn(IFNULL, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(AASTORE);
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/world/chunk/storage/ExtendedBlockStorage"}, 0, null);
mv.visitVarInsn(ALOAD, 6);
Label l6 = new Label();
mv.visitJumpInsn(IFNONNULL, l6);
mv.visitTypeInsn(NEW, "net/minecraft/world/chunk/storage/ExtendedBlockStorage");
mv.visitInsn(DUP);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "<init>", "(IZ)V", false);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ALOAD, 6);
mv.visitInsn(AASTORE);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "getData", "()Lnet/minecraft/world/chunk/BlockStateContainer;", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/BlockStateContainer", "read", "(Lnet/minecraft/network/PacketBuffer;)V", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "getBlockLight", "()Lnet/minecraft/world/chunk/NibbleArray;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/NibbleArray", "getData", "()[B", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/network/PacketBuffer", "readBytes", "([B)Lio/netty/buffer/ByteBuf;", false);
mv.visitInsn(POP);
mv.visitVarInsn(ILOAD, 4);
mv.visitJumpInsn(IFEQ, l5);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "getSkyLight", "()Lnet/minecraft/world/chunk/NibbleArray;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/NibbleArray", "getData", "()[B", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/network/PacketBuffer", "readBytes", "([B)Lio/netty/buffer/ByteBuf;", false);
mv.visitInsn(POP);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(5, 1);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ILOAD, 3);
Label l7 = new Label();
mv.visitJumpInsn(IFEQ, l7);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "blockBiomeArray", "[B");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/network/PacketBuffer", "readBytes", "([B)Lio/netty/buffer/ByteBuf;", false);
mv.visitInsn(POP);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 5);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitInsn(ARRAYLENGTH);
Label l9 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l9);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(AALOAD);
Label l10 = new Label();
mv.visitJumpInsn(IFNULL, l10);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ISHL);
mv.visitInsn(IAND);
mv.visitJumpInsn(IFEQ, l10);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(AALOAD);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "recalculateRefCounts", "()V", false);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(5, 1);
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "isLightPopulated", "Z");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "isTerrainPopulated", "Z");
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "generateHeightMap", "()V", false);
mv.visitTypeInsn(NEW, "java/util/ArrayList");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "values", "()Ljava/util/Collection;", true);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Collection", "iterator", "()Ljava/util/Iterator;", true);
mv.visitVarInsn(ASTORE, 6);
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/util/List", "java/util/Iterator"}, 0, null);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label l12 = new Label();
mv.visitJumpInsn(IFEQ, l12);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/tileentity/TileEntity");
mv.visitVarInsn(ASTORE, 7);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "getPos", "()Lnet/minecraft/util/math/BlockPos;", false);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "getBlockType", "()Lnet/minecraft/block/Block;", false);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "getBlockMetadata", "()I", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "getStateFromMeta", "(I)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "getPos", "()Lnet/minecraft/util/math/BlockPos;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockState", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "shouldRefresh", "(Lnet/minecraft/world/World;Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/block/state/IBlockState;)Z", false);
Label l13 = new Label();
mv.visitJumpInsn(IFEQ, l13);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
mv.visitInsn(POP);
mv.visitLabel(l13);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/tileentity/TileEntity"}, 0, null);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "updateContainingBlockInfo", "()V", false);
mv.visitJumpInsn(GOTO, l11);
mv.visitLabel(l12);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "iterator", "()Ljava/util/Iterator;", true);
mv.visitVarInsn(ASTORE, 6);
Label l14 = new Label();
mv.visitLabel(l14);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/util/Iterator"}, 0, null);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label l15 = new Label();
mv.visitJumpInsn(IFEQ, l15);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/tileentity/TileEntity");
mv.visitVarInsn(ASTORE, 7);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "invalidate", "()V", false);
mv.visitJumpInsn(GOTO, l14);
mv.visitLabel(l15);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(6, 8);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getBiome", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/world/biome/BiomeProvider;)Lnet/minecraft/world/biome/Biome;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getX", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "getZ", "()I", false);
mv.visitIntInsn(BIPUSH, 15);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "blockBiomeArray", "[B");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IOR);
mv.visitInsn(BALOAD);
mv.visitIntInsn(SIPUSH, 255);
mv.visitInsn(IAND);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 5);
mv.visitIntInsn(SIPUSH, 255);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/init/Biomes", "PLAINS", "Lnet/minecraft/world/biome/Biome;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/biome/BiomeProvider", "getBiome", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/world/biome/Biome;)Lnet/minecraft/world/biome/Biome;", false);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/world/biome/Biome", "getIdForBiome", "(Lnet/minecraft/world/biome/Biome;)I", false);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "blockBiomeArray", "[B");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(IOR);
mv.visitVarInsn(ILOAD, 5);
mv.visitIntInsn(SIPUSH, 255);
mv.visitInsn(IAND);
mv.visitInsn(I2B);
mv.visitInsn(BASTORE);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/world/biome/Biome", "getBiome", "(I)Lnet/minecraft/world/biome/Biome;", false);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 6);
Label l1 = new Label();
mv.visitJumpInsn(IFNONNULL, l1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/init/Biomes", "PLAINS", "Lnet/minecraft/world/biome/Biome;");
Label l2 = new Label();
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/world/biome/Biome"}, 0, null);
mv.visitVarInsn(ALOAD, 6);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"net/minecraft/world/biome/Biome"});
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 7);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getBiomeArray", "()[B", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "blockBiomeArray", "[B");
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setBiomeArray", "([B)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "blockBiomeArray", "[B");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l0);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk", "LOGGER", "Lorg/apache/logging/log4j/Logger;");
mv.visitLdcInsn("Could not set level chunk biomes, array length is {} instead of {}");
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "blockBiomeArray", "[B");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitMethodInsn(INVOKEINTERFACE, "org/apache/logging/log4j/Logger", "warn", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", true);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "blockBiomeArray", "[B");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "blockBiomeArray", "[B");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(5, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "resetRelightChecks", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "queuedLightChecks", "I");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "enqueueRelightChecks", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "queuedLightChecks", "I");
mv.visitIntInsn(SIPUSH, 4096);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l0);
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitVarInsn(ASTORE, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l1 = new Label();
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"net/minecraft/util/math/BlockPos", Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 8);
mv.visitJumpInsn(IF_ICMPGE, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "queuedLightChecks", "I");
mv.visitIntInsn(SIPUSH, 4096);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPLT, l2);
mv.visitInsn(RETURN);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "queuedLightChecks", "I");
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IREM);
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "queuedLightChecks", "I");
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IDIV);
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IREM);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "queuedLightChecks", "I");
mv.visitIntInsn(SIPUSH, 256);
mv.visitInsn(IDIV);
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(DUP);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "queuedLightChecks", "I");
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "queuedLightChecks", "I");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 6);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_FULL, 7, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/util/math/BlockPos", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 6);
mv.visitIntInsn(BIPUSH, 16);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l4);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "add", "(III)Lnet/minecraft/util/math/BlockPos;", false);
mv.visitVarInsn(ASTORE, 7);
mv.visitVarInsn(ILOAD, 6);
Label l5 = new Label();
mv.visitJumpInsn(IFEQ, l5);
mv.visitVarInsn(ILOAD, 6);
mv.visitIntInsn(BIPUSH, 15);
mv.visitJumpInsn(IF_ICMPEQ, l5);
mv.visitVarInsn(ILOAD, 4);
mv.visitJumpInsn(IFEQ, l5);
mv.visitVarInsn(ILOAD, 4);
mv.visitIntInsn(BIPUSH, 15);
mv.visitJumpInsn(IF_ICMPEQ, l5);
mv.visitVarInsn(ILOAD, 5);
mv.visitJumpInsn(IFEQ, l5);
mv.visitVarInsn(ILOAD, 5);
mv.visitIntInsn(BIPUSH, 15);
Label l6 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l6);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/util/math/BlockPos"}, 0, null);
mv.visitInsn(ICONST_1);
Label l7 = new Label();
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(AALOAD);
Label l8 = new Label();
mv.visitJumpInsn(IFNONNULL, l8);
mv.visitVarInsn(ILOAD, 8);
Label l9 = new Label();
mv.visitJumpInsn(IFNE, l9);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(AALOAD);
Label l10 = new Label();
mv.visitJumpInsn(IFNULL, l10);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "get", "(III)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getBlock", "()Lnet/minecraft/block/Block;", true);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "storageArrays", "[Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/storage/ExtendedBlockStorage", "get", "(III)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/block/Block", "isAir", "(Lnet/minecraft/block/state/IBlockState;Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/math/BlockPos;)Z", false);
mv.visitJumpInsn(IFEQ, l10);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/util/EnumFacing", "values", "()[Lnet/minecraft/util/EnumFacing;", false);
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 9);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ISTORE, 10);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 11);
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitFrame(Opcodes.F_APPEND,3, new Object[] {"[Lnet/minecraft/util/EnumFacing;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 11);
mv.visitVarInsn(ILOAD, 10);
Label l12 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l12);
mv.visitVarInsn(ALOAD, 9);
mv.visitVarInsn(ILOAD, 11);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ASTORE, 12);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ALOAD, 12);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "offset", "(Lnet/minecraft/util/EnumFacing;)Lnet/minecraft/util/math/BlockPos;", false);
mv.visitVarInsn(ASTORE, 13);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 13);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "getBlockState", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 13);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getLightValue", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/math/BlockPos;)I", true);
Label l13 = new Label();
mv.visitJumpInsn(IFLE, l13);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 13);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "checkLight", "(Lnet/minecraft/util/math/BlockPos;)Z", false);
mv.visitInsn(POP);
mv.visitLabel(l13);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(11, 1);
mv.visitJumpInsn(GOTO, l11);
mv.visitLabel(l12);
mv.visitFrame(Opcodes.F_CHOP,3, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "checkLight", "(Lnet/minecraft/util/math/BlockPos;)Z", false);
mv.visitInsn(POP);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitIincInsn(6, 1);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_FULL, 3, new Object[] {"net/minecraft/world/chunk/Chunk", "net/minecraft/util/math/BlockPos", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitIincInsn(2, 1);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(6, 14);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "checkLight", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "isTerrainPopulated", "Z");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "isLightPopulated", "Z");
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos", "<init>", "(III)V", false);
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "hasSkyLight", "()Z", false);
Label l0 = new Label();
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_M1);
mv.visitInsn(ICONST_0);
mv.visitInsn(ICONST_M1);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "add", "(III)Lnet/minecraft/util/math/BlockPos;", false);
mv.visitVarInsn(ALOAD, 1);
mv.visitIntInsn(BIPUSH, 16);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "getSeaLevel", "()I", false);
mv.visitIntInsn(BIPUSH, 16);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "add", "(III)Lnet/minecraft/util/math/BlockPos;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "isAreaLoaded", "(Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/util/math/BlockPos;)Z", false);
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"net/minecraft/util/math/BlockPos", Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 16);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l3);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
Label l4 = new Label();
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 16);
Label l5 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "checkLight", "(II)Z", false);
Label l6 = new Label();
mv.visitJumpInsn(IFNE, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "isLightPopulated", "Z");
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(3, 1);
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(2, 1);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "isLightPopulated", "Z");
mv.visitJumpInsn(IFEQ, l0);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/util/EnumFacing$Plane", "HORIZONTAL", "Lnet/minecraft/util/EnumFacing$Plane;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/EnumFacing$Plane", "iterator", "()Ljava/util/Iterator;", false);
mv.visitVarInsn(ASTORE, 2);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/util/Iterator"}, 0, null);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
Label l8 = new Label();
mv.visitJumpInsn(IFEQ, l8);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/util/EnumFacing");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/EnumFacing", "getAxisDirection", "()Lnet/minecraft/util/EnumFacing$AxisDirection;", false);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/util/EnumFacing$AxisDirection", "POSITIVE", "Lnet/minecraft/util/EnumFacing$AxisDirection;");
Label l9 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l9);
mv.visitIntInsn(BIPUSH, 16);
Label l10 = new Label();
mv.visitJumpInsn(GOTO, l10);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {"net/minecraft/util/EnumFacing"}, 0, null);
mv.visitInsn(ICONST_1);
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos", "offset", "(Lnet/minecraft/util/EnumFacing;I)Lnet/minecraft/util/math/BlockPos;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "getChunkFromBlockCoords", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/world/chunk/Chunk;", false);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/EnumFacing", "getOpposite", "()Lnet/minecraft/util/EnumFacing;", false);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "checkLightSide", "(Lnet/minecraft/util/EnumFacing;)V", false);
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "setSkylightUpdated", "()V", false);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "isLightPopulated", "Z");
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(6, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "setSkylightUpdated", "()V", null, null);
mv.visitCode();
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 1);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "updateSkylightColumns", "[Z");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "updateSkylightColumns", "[Z");
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(ICONST_1);
mv.visitInsn(BASTORE);
mv.visitIincInsn(1, 1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "recheckGaps", "(Z)V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "checkLightSide", "(Lnet/minecraft/util/EnumFacing;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "isTerrainPopulated", "Z");
Label l0 = new Label();
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/util/EnumFacing", "EAST", "Lnet/minecraft/util/EnumFacing;");
Label l1 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 16);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitIntInsn(BIPUSH, 15);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "checkLight", "(II)Z", false);
mv.visitInsn(POP);
mv.visitIincInsn(2, 1);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/util/EnumFacing", "WEST", "Lnet/minecraft/util/EnumFacing;");
Label l4 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 16);
Label l6 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "checkLight", "(II)Z", false);
mv.visitInsn(POP);
mv.visitIincInsn(2, 1);
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/util/EnumFacing", "SOUTH", "Lnet/minecraft/util/EnumFacing;");
Label l7 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l7);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 16);
Label l9 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l9);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 15);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "checkLight", "(II)Z", false);
mv.visitInsn(POP);
mv.visitIincInsn(2, 1);
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l9);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/util/EnumFacing", "NORTH", "Lnet/minecraft/util/EnumFacing;");
mv.visitJumpInsn(IF_ACMPNE, l0);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l10 = new Label();
mv.visitLabel(l10);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 2);
mv.visitIntInsn(BIPUSH, 16);
mv.visitJumpInsn(IF_ICMPGE, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "checkLight", "(II)Z", false);
mv.visitInsn(POP);
mv.visitIincInsn(2, 1);
mv.visitJumpInsn(GOTO, l10);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "checkLight", "(II)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getTopFilledSegment", "()I", false);
mv.visitVarInsn(ISTORE, 3);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 5);
mv.visitTypeInsn(NEW, "net/minecraft/util/math/BlockPos$MutableBlockPos");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "x", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 1);
mv.visitInsn(IADD);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "z", "I");
mv.visitInsn(ICONST_4);
mv.visitInsn(ISHL);
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKESPECIAL, "net/minecraft/util/math/BlockPos$MutableBlockPos", "<init>", "(III)V", false);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ILOAD, 3);
mv.visitIntInsn(BIPUSH, 16);
mv.visitInsn(IADD);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitVarInsn(ISTORE, 7);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_FULL, 8, new Object[] {"net/minecraft/world/chunk/Chunk", Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, Opcodes.INTEGER, "net/minecraft/util/math/BlockPos$MutableBlockPos", Opcodes.INTEGER}, 0, new Object[] {});
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "getSeaLevel", "()I", false);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGT, l1);
mv.visitVarInsn(ILOAD, 7);
Label l2 = new Label();
mv.visitJumpInsn(IFLE, l2);
mv.visitVarInsn(ILOAD, 5);
mv.visitJumpInsn(IFNE, l2);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos$MutableBlockPos", "getX", "()I", false);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos$MutableBlockPos", "getZ", "()I", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos$MutableBlockPos", "setPos", "(III)Lnet/minecraft/util/math/BlockPos$MutableBlockPos;", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockLightOpacity", "(Lnet/minecraft/util/math/BlockPos;)I", false);
mv.visitVarInsn(ISTORE, 8);
mv.visitVarInsn(ILOAD, 8);
mv.visitIntInsn(SIPUSH, 255);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l3);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos$MutableBlockPos", "getY", "()I", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "getSeaLevel", "()I", false);
mv.visitJumpInsn(IF_ICMPGE, l3);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 5);
mv.visitLabel(l3);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 4);
Label l4 = new Label();
mv.visitJumpInsn(IFNE, l4);
mv.visitVarInsn(ILOAD, 8);
mv.visitJumpInsn(IFLE, l4);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 4);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l4);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ILOAD, 4);
mv.visitJumpInsn(IFEQ, l5);
mv.visitVarInsn(ILOAD, 8);
mv.visitJumpInsn(IFNE, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "checkLight", "(Lnet/minecraft/util/math/BlockPos;)Z", false);
mv.visitJumpInsn(IFNE, l5);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l5);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitIincInsn(7, -1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos$MutableBlockPos", "getY", "()I", false);
mv.visitVarInsn(ISTORE, 7);
Label l6 = new Label();
mv.visitLabel(l6);
mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
mv.visitVarInsn(ILOAD, 7);
Label l7 = new Label();
mv.visitJumpInsn(IFLE, l7);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos$MutableBlockPos", "getX", "()I", false);
mv.visitVarInsn(ILOAD, 7);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos$MutableBlockPos", "getZ", "()I", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/math/BlockPos$MutableBlockPos", "setPos", "(III)Lnet/minecraft/util/math/BlockPos$MutableBlockPos;", false);
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getBlockState", "(Lnet/minecraft/util/math/BlockPos;)Lnet/minecraft/block/state/IBlockState;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraft/block/state/IBlockState", "getLightValue", "(Lnet/minecraft/world/IBlockAccess;Lnet/minecraft/util/math/BlockPos;)I", true);
Label l8 = new Label();
mv.visitJumpInsn(IFLE, l8);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "checkLight", "(Lnet/minecraft/util/math/BlockPos;)Z", false);
mv.visitInsn(POP);
mv.visitLabel(l8);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitIincInsn(7, -1);
mv.visitJumpInsn(GOTO, l6);
mv.visitLabel(l7);
mv.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitMaxs(6, 9);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "isLoaded", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "loaded", "Z");
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "markLoaded", "(Z)V", null, null);
{
av0 = mv.visitAnnotation("Lnet/minecraftforge/fml/relauncher/SideOnly;", true);
av0.visitEnum("value", "Lnet/minecraftforge/fml/relauncher/Side;", "CLIENT");
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "loaded", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getWorld", "()Lnet/minecraft/world/World;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getHeightMap", "()[I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setHeightMap", "([I)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l0);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk", "LOGGER", "Lorg/apache/logging/log4j/Logger;");
mv.visitLdcInsn("Could not set level chunk heightmap, array length is {} instead of {}");
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitMethodInsn(INVOKEINTERFACE, "org/apache/logging/log4j/Logger", "warn", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", true);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitInsn(ARRAYLENGTH);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMap", "[I");
mv.visitMethodInsn(INVOKESTATIC, "com/google/common/primitives/Ints", "min", "([I)I", false);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "heightMapMinimum", "I");
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(5, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getTileEntityMap", "()Ljava/util/Map;", "()Ljava/util/Map<Lnet/minecraft/util/math/BlockPos;Lnet/minecraft/tileentity/TileEntity;>;", null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getEntityLists", "()[Lnet/minecraft/util/ClassInheritanceMultiMap;", "()[Lnet/minecraft/util/ClassInheritanceMultiMap<Lnet/minecraft/entity/Entity;>;", null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "entityLists", "[Lnet/minecraft/util/ClassInheritanceMultiMap;");
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "isTerrainPopulated", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "isTerrainPopulated", "Z");
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setTerrainPopulated", "(Z)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "isTerrainPopulated", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "isLightPopulated", "()Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "isLightPopulated", "Z");
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setLightPopulated", "(Z)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "isLightPopulated", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setModified", "(Z)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "dirty", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setHasEntities", "(Z)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "hasEntities", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setLastSaveTime", "(J)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(LLOAD, 1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "lastSaveTime", "J");
mv.visitInsn(RETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getLowestHeight", "()I", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "heightMapMinimum", "I");
mv.visitInsn(IRETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getInhabitedTime", "()J", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "inhabitedTime", "J");
mv.visitInsn(LRETURN);
mv.visitMaxs(2, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "setInhabitedTime", "(J)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(LLOAD, 1);
mv.visitFieldInsn(PUTFIELD, "net/minecraft/world/chunk/Chunk", "inhabitedTime", "J");
mv.visitInsn(RETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "removeInvalidTileEntity", "(Lnet/minecraft/util/math/BlockPos;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "loaded", "Z");
Label l0 = new Label();
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
mv.visitTypeInsn(CHECKCAST, "net/minecraft/tileentity/TileEntity");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/tileentity/TileEntity", "isInvalid", "()Z", false);
mv.visitJumpInsn(IFEQ, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "tileEntities", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "remove", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
mv.visitInsn(POP);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "logCascadingWorldGeneration", "()V", null, null);
mv.visitCode();
mv.visitMethodInsn(INVOKESTATIC, "net/minecraftforge/fml/common/Loader", "instance", "()Lnet/minecraftforge/fml/common/Loader;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraftforge/fml/common/Loader", "activeModContainer", "()Lnet/minecraftforge/fml/common/ModContainer;", false);
mv.visitVarInsn(ASTORE, 1);
mv.visitLdcInsn("{} loaded a new chunk {} in dimension {} ({}) while populating chunk {}, causing cascading worldgen lag.");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraftforge/fml/common/ModContainer", "getName", "()Ljava/lang/String;", true);
mv.visitLdcInsn("Luminous");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
Label l1 = new Label();
mv.visitJumpInsn(IFEQ, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_APPEND,2, new Object[] {"net/minecraftforge/fml/common/ModContainer", "java/lang/String"}, 0, null);
mv.visitFieldInsn(GETSTATIC, "net/minecraftforge/fml/common/FMLLog", "log", "Lorg/apache/logging/log4j/Logger;");
mv.visitVarInsn(ALOAD, 2);
mv.visitLdcInsn("Minecraft");
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getPos", "()Lnet/minecraft/util/math/ChunkPos;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "getDimension", "()I", false);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "getDimensionType", "()Lnet/minecraft/world/DimensionType;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/DimensionType", "getName", "()Ljava/lang/String;", false);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk", "populating", "Lnet/minecraft/util/math/ChunkPos;");
mv.visitMethodInsn(INVOKEINTERFACE, "org/apache/logging/log4j/Logger", "debug", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V", true);
mv.visitFieldInsn(GETSTATIC, "net/minecraftforge/fml/common/FMLLog", "log", "Lorg/apache/logging/log4j/Logger;");
mv.visitLdcInsn("Consider setting 'fixVanillaCascading' to 'true' in the Forge config to fix many cases where this occurs in the base game.");
mv.visitMethodInsn(INVOKEINTERFACE, "org/apache/logging/log4j/Logger", "debug", "(Ljava/lang/String;)V", true);
Label l2 = new Label();
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitFieldInsn(GETSTATIC, "net/minecraftforge/fml/common/FMLLog", "log", "Lorg/apache/logging/log4j/Logger;");
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "net/minecraftforge/fml/common/ModContainer", "getName", "()Ljava/lang/String;", true);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/chunk/Chunk", "getPos", "()Lnet/minecraft/util/math/ChunkPos;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "getDimension", "()I", false);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/World", "provider", "Lnet/minecraft/world/WorldProvider;");
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/WorldProvider", "getDimensionType", "()Lnet/minecraft/world/DimensionType;", false);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/DimensionType", "getName", "()Ljava/lang/String;", false);
mv.visitFieldInsn(GETSTATIC, "net/minecraft/world/chunk/Chunk", "populating", "Lnet/minecraft/util/math/ChunkPos;");
mv.visitMethodInsn(INVOKEINTERFACE, "org/apache/logging/log4j/Logger", "warn", "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V", true);
mv.visitFieldInsn(GETSTATIC, "net/minecraftforge/fml/common/FMLLog", "log", "Lorg/apache/logging/log4j/Logger;");
mv.visitLdcInsn("Please report this to the mod's issue tracker. This log can be disabled in the Forge config.");
mv.visitMethodInsn(INVOKEINTERFACE, "org/apache/logging/log4j/Logger", "warn", "(Ljava/lang/String;)V", true);
mv.visitLabel(l2);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(RETURN);
mv.visitMaxs(7, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getCapabilities", "()Lnet/minecraftforge/common/capabilities/CapabilityDispatcher;", null, null);
{
av0 = mv.visitAnnotation("Ljavax/annotation/Nullable;", true);
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "capabilities", "Lnet/minecraftforge/common/capabilities/CapabilityDispatcher;");
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "hasCapability", "(Lnet/minecraftforge/common/capabilities/Capability;Lnet/minecraft/util/EnumFacing;)Z", "(Lnet/minecraftforge/common/capabilities/Capability<*>;Lnet/minecraft/util/EnumFacing;)Z", null);
{
av0 = mv.visitParameterAnnotation(1, "Ljavax/annotation/Nullable;", true);
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "capabilities", "Lnet/minecraftforge/common/capabilities/CapabilityDispatcher;");
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "capabilities", "Lnet/minecraftforge/common/capabilities/CapabilityDispatcher;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraftforge/common/capabilities/CapabilityDispatcher", "hasCapability", "(Lnet/minecraftforge/common/capabilities/Capability;Lnet/minecraft/util/EnumFacing;)Z", false);
mv.visitJumpInsn(IFEQ, l0);
mv.visitInsn(ICONST_1);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitInsn(ICONST_0);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getCapability", "(Lnet/minecraftforge/common/capabilities/Capability;Lnet/minecraft/util/EnumFacing;)Ljava/lang/Object;", "<T:Ljava/lang/Object;>(Lnet/minecraftforge/common/capabilities/Capability<TT;>;Lnet/minecraft/util/EnumFacing;)TT;", null);
{
av0 = mv.visitAnnotation("Ljavax/annotation/Nullable;", true);
av0.visitEnd();
}
{
av0 = mv.visitParameterAnnotation(1, "Ljavax/annotation/Nullable;", true);
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "capabilities", "Lnet/minecraftforge/common/capabilities/CapabilityDispatcher;");
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitInsn(ACONST_NULL);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "capabilities", "Lnet/minecraftforge/common/capabilities/CapabilityDispatcher;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraftforge/common/capabilities/CapabilityDispatcher", "getCapability", "(Lnet/minecraftforge/common/capabilities/Capability;Lnet/minecraft/util/EnumFacing;)Ljava/lang/Object;", false);
mv.visitLabel(l1);
mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {"java/lang/Object"});
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_SYNTHETIC, "lambda$onUnload$2", "(Lnet/minecraft/util/ClassInheritanceMultiMap;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitLdcInsn(Type.getType("Lnet/minecraft/entity/player/EntityPlayer;"));
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/util/ClassInheritanceMultiMap", "getByClass", "(Ljava/lang/Class;)Ljava/lang/Iterable;", false);
mv.visitMethodInsn(INVOKESTATIC, "com/google/common/collect/Lists", "newArrayList", "(Ljava/lang/Iterable;)Ljava/util/ArrayList;", false);
mv.visitVarInsn(ALOAD, 0);
mv.visitInvokeDynamicInsn("accept", "(Lnet/minecraft/world/chunk/Chunk;)Ljava/util/function/Consumer;", new Handle(Opcodes.H_INVOKESTATIC, "java/lang/invoke/LambdaMetafactory", "metafactory", "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"), new Object[]{Type.getType("(Ljava/lang/Object;)V"), new Handle(Opcodes.H_INVOKESPECIAL, "net/minecraft/world/chunk/Chunk", "lambda$null$1", "(Lnet/minecraft/entity/player/EntityPlayer;)V"), Type.getType("(Lnet/minecraft/entity/player/EntityPlayer;)V")});
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/ArrayList", "forEach", "(Ljava/util/function/Consumer;)V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_SYNTHETIC, "lambda$null$1", "(Lnet/minecraft/entity/player/EntityPlayer;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "net/minecraft/world/chunk/Chunk", "world", "Lnet/minecraft/world/World;");
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKEVIRTUAL, "net/minecraft/world/World", "updateEntityWithOptionalForce", "(Lnet/minecraft/entity/Entity;Z)V", false);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC + ACC_SYNTHETIC, "lambda$getBlockState$0", "(III)Ljava/lang/String;", null, new String[] { "java/lang/Exception" });
mv.visitCode();
mv.visitVarInsn(ILOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "net/minecraft/crash/CrashReportCategory", "getCoordinateInfo", "(III)Ljava/lang/String;", false);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
mv.visitCode();
mv.visitMethodInsn(INVOKESTATIC, "org/apache/logging/log4j/LogManager", "getLogger", "()Lorg/apache/logging/log4j/Logger;", false);
mv.visitFieldInsn(PUTSTATIC, "net/minecraft/world/chunk/Chunk", "LOGGER", "Lorg/apache/logging/log4j/Logger;");
mv.visitInsn(ACONST_NULL);
mv.visitFieldInsn(PUTSTATIC, "net/minecraft/world/chunk/Chunk", "NULL_BLOCK_STORAGE", "Lnet/minecraft/world/chunk/storage/ExtendedBlockStorage;");
mv.visitInsn(ACONST_NULL);
mv.visitFieldInsn(PUTSTATIC, "net/minecraft/world/chunk/Chunk", "populating", "Lnet/minecraft/util/math/ChunkPos;");
mv.visitInsn(RETURN);
mv.visitMaxs(1, 0);
mv.visitEnd();
}
cw.visitEnd();

return cw.toByteArray();
}
}
